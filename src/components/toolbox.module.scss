@use "wood-theme" as wood;

$toolboxAnimationDuration: 1s;


.toolboxContainer {
  display: block;
  width: 100%;

  overflow: hidden;

  position: relative;

  .toolbox {
    width: 70%;
    height: auto;
    margin: 0 15%;
   // margin-top: 10%;


    transform: rotate(0deg);
    transition: transform $toolboxAnimationDuration;
    transition-delay: $toolboxAnimationDuration; //the delay is for when the toolbox flips upward.

    position: relative; //required to allow z-index to work
    z-index: 1; //keep image above the skillContainer
  }

  .skillContainer {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
    justify-content: center;

    list-style: none; //remove dots from list

    //position must be relative so that the space for the
    //skill container to sit in when the toolbox flips over
    //is available.
    position: relative; //required to allow z-index to work

    z-index: 0; //keep skills under the toolbox image

    //keep container hidden behind toolbox by translating
    //up 2 times the height of this container to give the 
    //illusion of the container falling out of the toolbox.

    //Note that 200% may not work as well when the container is 
    //very short relative to the toolbox
    transform: translateY(-100%); 


    transition: transform $toolboxAnimationDuration, opacity $toolboxAnimationDuration;
    //the delay is for when the toolbox flips upward, allowing 
    //this to retract into the image before the toolbox rotates
    transition-delay: 0s;  

    //set to 0 since toolbox has a transparent background that
    //would reveal the skill container if opacity was not 0
    opacity: 0; 

    //right is 15% away from 100%, use width to set the right value

    left: 15%;
    width: 70%; //width must be equal to 100% - left - right

    li {
      margin: 0.5em;
      padding: 1em;
      text-align: center;
      border-radius: 10px;
    
      @include wood.straight-grain-1-basswood-light-bg(0deg);

      font-weight: bold;
    }
  }
}


.toolboxContainer.upsideDown {
  .toolbox {
    transform: rotate(180deg);
    transition-delay: 0s; //this delay is for when the toolbox flips upside down. It must flip before the skill container moves

  }

  .skillContainer {
    transform: translateY(0);
    transition-delay: $toolboxAnimationDuration;; //this delay is for when the toolbox flips upside down.
    opacity: 1;
  }
}